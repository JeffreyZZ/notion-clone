# Generated by Django 3.2.15 on 2023-06-03 02:26

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import martor.models
import simple_history.models


class Migration(migrations.Migration):

    dependencies = [
        ('backend', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Answer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('a_edited_time', models.DateTimeField(auto_now=True)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('deletedHistory', models.CharField(choices=[('DELETED', 'Deleted'), ('UNDELETED', 'UnDeleted')], default='', max_length=5000)),
                ('body', martor.models.MartorField()),
                ('accepted', models.BooleanField(default=False)),
                ('a_reputation', models.IntegerField(default=0)),
                ('is_bountied_awarded', models.BooleanField(default=False)),
                ('active_time', models.DateTimeField(auto_now=True)),
                ('why_editing', models.CharField(default='', max_length=5000)),
                ('monitor_it', models.BooleanField(default=False)),
                ('why_editing_answer', models.CharField(blank=True, default='', max_length=5000, null=True)),
                ('revival_stage_one', models.BooleanField(blank=True, default=False, null=True)),
                ('necromancer_check', models.BooleanField(blank=True, default=False, null=True)),
                ('is_wiki_answer', models.BooleanField(default=False)),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_time', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'qa_answer',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='LowQualityPostsCheck',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('suggested_through', models.CharField(choices=[('User', 'User'), ('Automatic', 'Automatic')], max_length=30)),
                ('why_low_quality', models.CharField(choices=[('Answer_Less_Than_200', 'Answer is Less than 200 Words'), ('Question_Less_Than_200', 'Question is Less than 200 Words'), ('Comment_As_Answer', 'Comment as Answer')], max_length=30)),
                ('is_completed', models.BooleanField(default=False)),
                ('how_many_votes_on_OK', models.IntegerField(default=0)),
                ('how_many_votes_on_deleteIt', models.IntegerField(default=0)),
                ('how_many_votes_on_close', models.IntegerField(default=0)),
                ('at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'review_lowqualitypostscheck',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type_of_noti', models.CharField(choices=[('comment_answer', 'comment_answer'), ('question_comment', 'question_comment'), ('community_message', 'community_message'), ('question_edit', 'question_edit'), ('question_reopen_voted', 'Question ReOpen Voted'), ('question_suggested_edit', 'Question Suggested Edit'), ('NEW_ANSWER', 'New_Answer')], default='', max_length=30)),
                ('url', models.URLField(blank=True, null=True)),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('is_read', models.BooleanField(default=False)),
            ],
            options={
                'db_table': 'notification_notification',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='PrivRepNotification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url', models.URLField(blank=True, default='#', null=True)),
                ('for_if', models.CharField(default='', max_length=30)),
                ('date_created_PrivNotify', models.DateTimeField(auto_now_add=True)),
                ('is_read', models.BooleanField(default=False)),
                ('type_of_PrivNotify', models.CharField(choices=[('EDIT_GOT_APPROVED', 'Edit Approved'), ('ANSWER_ACCEPT_REP_P', 'Answer Accept Rep Plus'), ('BOUNTY_AWARDED_REP_P', 'Bounty Award Rep Plus'), ('MY_ANSWER_UPVOTE_REP_P', 'Answered Answer Upvote Rep Plus'), ('QUESTION_DOWNVOTE', 'Question DownVote'), ('MY_QUESTION_UPVOTE_REP_P', 'Asked Question Upvote Rep Plus'), ('Privilege_Earned', 'Privilege Earned'), ('BADGE_EARNED', 'Badge Earned')], default='', max_length=30)),
                ('missingReputation', models.IntegerField(blank=True, default=0, null=True)),
                ('privilegeURL', models.URLField(blank=True, null=True)),
                ('description', models.CharField(default='', max_length=1000)),
            ],
            options={
                'db_table': 'notification_privrepnotification',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ReviewLowQualityPosts',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reviewActions', models.CharField(blank=True, choices=[('Looks_OK', 'Looks Ok'), ('Edit', 'Edit'), ('Recommend_Delete', 'Recommend Delete'), ('Recommend_Close', 'Recommend Close'), ('Skip', 'Skip')], max_length=30, null=True)),
                ('is_reviewed', models.BooleanField(default=False)),
                ('reviewed_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'review_reviewlowqualityposts',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='HistoricalQuestion',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('title', models.CharField(default='', max_length=5000)),
                ('body', martor.models.MartorField()),
                ('date', models.DateTimeField(blank=True, editable=False)),
                ('active_date', models.DateTimeField(blank=True, editable=False)),
                ('q_reputation', models.IntegerField(default=0)),
                ('q_edited_time', models.DateTimeField(blank=True, editable=False)),
                ('is_bountied', models.BooleanField(default=False)),
                ('bounty_date_announced', models.DateTimeField(blank=True, editable=False)),
                ('limit_exced', models.BooleanField(default=False)),
                ('is_edited', models.BooleanField(default=False)),
                ('is_protected', models.BooleanField(default=False)),
                ('why_editing_question', models.CharField(default='', max_length=5000)),
                ('is_deleted', models.BooleanField(default=False)),
                ('answeredOnMinusTwo_Downvote', models.DateTimeField(blank=True, editable=False)),
                ('is_closed', models.BooleanField(default=False)),
                ('closed_at', models.DateTimeField(blank=True, editable=False)),
                ('is_answer_accepted', models.BooleanField(default=False)),
                ('deleted_time', models.DateTimeField(blank=True, editable=False)),
                ('reversal_monitor', models.BooleanField(default=False)),
                ('lastActiveFor', models.CharField(blank=True, choices=[('ANSWERED', 'Answered'), ('MODIFIED', 'Modified'), ('ASKED', 'Asked')], default='', max_length=5000)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_relation', models.ForeignKey(db_constraint=False, on_delete=django.db.models.deletion.DO_NOTHING, related_name='his', to='backend.question')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('page_element', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='backend.page_element')),
                ('post_owner', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('q_edited_by', models.ForeignKey(blank=True, db_constraint=False, default='', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical question',
                'db_table': 'qa_historicalquestion',
                'managed': False,
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalAnswer',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('a_edited_time', models.DateTimeField(blank=True, editable=False)),
                ('date', models.DateTimeField(blank=True, editable=False)),
                ('deletedHistory', models.CharField(choices=[('DELETED', 'Deleted'), ('UNDELETED', 'UnDeleted')], default='', max_length=5000)),
                ('body', martor.models.MartorField()),
                ('accepted', models.BooleanField(default=False)),
                ('a_reputation', models.IntegerField(default=0)),
                ('is_bountied_awarded', models.BooleanField(default=False)),
                ('active_time', models.DateTimeField(blank=True, editable=False)),
                ('why_editing', models.CharField(default='', max_length=5000)),
                ('monitor_it', models.BooleanField(default=False)),
                ('why_editing_answer', models.CharField(blank=True, default='', max_length=5000, null=True)),
                ('revival_stage_one', models.BooleanField(blank=True, default=False, null=True)),
                ('necromancer_check', models.BooleanField(blank=True, default=False, null=True)),
                ('is_wiki_answer', models.BooleanField(default=False)),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_time', models.DateTimeField(blank=True, editable=False)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('a_edited_by', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('answer_owner', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('history_relation', models.ForeignKey(db_constraint=False, on_delete=django.db.models.deletion.DO_NOTHING, related_name='anshis', to='backend.answer')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('questionans', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='backend.question')),
            ],
            options={
                'verbose_name': 'historical answer',
                'db_table': 'qa_historicalanswer',
                'managed': False,
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
    ]
