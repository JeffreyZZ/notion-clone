# Generated by Django 3.2.15 on 2023-05-19 20:23

from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import martor.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('email', models.EmailField(max_length=254, unique=True)),
            ],
            options={
                'db_table': 'quesnotion_users',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Page',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64)),
                ('photo', models.CharField(blank=True, max_length=100, null=True)),
                ('closed', models.BooleanField(default=True)),
            ],
            options={
                'db_table': 'qa_page',
                'ordering': ['id'],
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Page_element',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('element_type', models.CharField(max_length=85)),
                ('order_on_page', models.FloatField()),
                ('color', models.CharField(blank=True, max_length=100, null=True)),
            ],
            options={
                'db_table': 'qa_page_element',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('full_name', models.CharField(default='', max_length=30)),
                ('not_to_Display_Full_name', models.CharField(default='', max_length=30)),
                ('email', models.EmailField(default='', max_length=30)),
                ('location', models.CharField(default='', max_length=30)),
                ('title', models.CharField(default='', max_length=30)),
                ('profile_photo', models.ImageField(default='media/isle.jpg', upload_to='profile_photos')),
                ('about_me', models.CharField(blank=True, default='', max_length=30, null=True)),
                ('website_link', models.URLField(blank=True)),
                ('twitter_link', models.URLField(blank=True)),
                ('github_link', models.URLField(blank=True)),
                ('q_edited_counter', models.IntegerField(default=0)),
                ('time', models.DateTimeField(auto_now_add=True)),
                ('reputation', models.IntegerField(default=1)),
                ('is_banned', models.BooleanField(default=False)),
                ('post_edit_inactive_for_six_month', models.IntegerField(default=0)),
                ('is_moderator', models.BooleanField(default=False)),
                ('is_high_moderator', models.BooleanField(default=False)),
                ('targeted_tag', models.CharField(default='Commenter', max_length=30)),
                ('review_close_votes', models.BooleanField(default=False)),
                ('favorite_question_S', models.BooleanField(default=False)),
                ('lifeJacket', models.BooleanField(default=False)),
                ('altruist', models.BooleanField(default=False)),
                ('commenter', models.BooleanField(default=False)),
                ('logout_on_all_devices', models.BooleanField(default=False)),
                ('send_email_notifications', models.BooleanField(default=False)),
                ('voting_flags', models.IntegerField(default=0)),
                ('helpful_close_votes', models.IntegerField(default=0)),
                ('name', models.CharField(default='', max_length=30)),
                ('prefered_technologies', models.CharField(default='', max_length=30)),
                ('min_expierence_level', models.CharField(choices=[('Student', 'Student'), ('Junior', 'Junior'), ('Mid_Level', 'Mid Level'), ('Senior', 'Senior'), ('Lead', 'Lead'), ('Manager', 'Manager')], default='', max_length=30)),
                ('max_expierence_level', models.CharField(choices=[('Student', 'Student'), ('Junior', 'Junior'), ('Mid_Level', 'Mid Level'), ('Senior', 'Senior'), ('Lead', 'Lead'), ('Manager', 'Manager')], default='', max_length=30)),
                ('job_type', models.CharField(choices=[('FULL_TIME', 'Full Time'), ('CONTRCT', 'Contract'), ('InternShip', 'InternShip')], max_length=30)),
                ('job_search_status', models.CharField(choices=[('looking_for_job', 'Actively looking right now'), ('open_but_not_looking', 'Open, but not actively looking'), ('not_interested_in_jobs', 'Not interested in jobs')], max_length=30)),
                ('phone_number', models.CharField(blank=True, max_length=30, null=True)),
                ('create_posts', models.BooleanField(default=True)),
                ('create_wiki_posts', models.BooleanField(default=False)),
                ('remove_new_user_restrictions', models.BooleanField(default=False)),
                ('voteUpPriv', models.BooleanField(default=False)),
                ('flag_posts', models.BooleanField(default=False)),
                ('comment_everywhere_Priv', models.BooleanField(default=False)),
                ('set_bounties', models.BooleanField(default=False)),
                ('edit_community_wiki', models.BooleanField(default=False)),
                ('voteDownPriv', models.BooleanField(default=False)),
                ('view_close_votes_Priv', models.BooleanField(default=False)),
                ('access_review_queues', models.BooleanField(default=False)),
                ('established_user_Priv', models.BooleanField(default=False)),
                ('create_tags', models.BooleanField(default=False)),
                ('edit_questions_answers', models.BooleanField(default=False)),
                ('cast_close_AND_Reopen_votes', models.BooleanField(default=False)),
                ('accessTo_moderatorTools', models.BooleanField(default=False)),
                ('protect_questions', models.BooleanField(default=False)),
                ('trusted_user_Priv', models.BooleanField(default=False)),
                ('helpful_flags_counter', models.IntegerField(blank=True, default=0, null=True)),
                ('posts_edited_counter', models.IntegerField(blank=True, default=0, null=True)),
                ('suggested_Edit_counter', models.IntegerField(blank=True, default=0, null=True)),
                ('editPostTimeOfUser', models.DateTimeField(blank=True, null=True)),
                ('Refiner_Illuminator_TagPostCounter', models.IntegerField(blank=True, default=0, null=True)),
            ],
            options={
                'db_table': 'profile_profile',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(default='', max_length=5000)),
                ('body', martor.models.MartorField()),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('active_date', models.DateTimeField(auto_now=True)),
                ('q_reputation', models.IntegerField(default=0)),
                ('q_edited_time', models.DateTimeField(auto_now_add=True)),
                ('is_bountied', models.BooleanField(default=False)),
                ('bounty_date_announced', models.DateTimeField(auto_now_add=True)),
                ('limit_exced', models.BooleanField(default=False)),
                ('is_edited', models.BooleanField(default=False)),
                ('is_protected', models.BooleanField(default=False)),
                ('why_editing_question', models.CharField(default='', max_length=5000)),
                ('is_deleted', models.BooleanField(default=False)),
                ('answeredOnMinusTwo_Downvote', models.DateTimeField(auto_now_add=True)),
                ('is_closed', models.BooleanField(default=False)),
                ('closed_at', models.DateTimeField(auto_now_add=True)),
                ('is_answer_accepted', models.BooleanField(default=False)),
                ('deleted_time', models.DateTimeField(auto_now_add=True)),
                ('reversal_monitor', models.BooleanField(default=False)),
                ('lastActiveFor', models.CharField(blank=True, choices=[('ANSWERED', 'Answered'), ('MODIFIED', 'Modified'), ('ASKED', 'Asked')], default='', max_length=5000)),
            ],
            options={
                'db_table': 'qa_question',
                'ordering': ['-date'],
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Kanban',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=64, null=True)),
                ('page_element', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='kanban', to='backend.page_element')),
            ],
        ),
        migrations.CreateModel(
            name='Table',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=100, null=True)),
                ('page_element', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='table', to='backend.page_element')),
            ],
        ),
        migrations.CreateModel(
            name='Table_data',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.CharField(blank=True, max_length=1000, null=True)),
                ('number', models.FloatField(blank=True, null=True)),
                ('date', models.DateTimeField(blank=True, null=True)),
                ('checkbox', models.BooleanField(blank=True, null=True)),
                ('url', models.CharField(blank=True, max_length=200, null=True)),
                ('property_type', models.CharField(max_length=100)),
                ('header', models.BooleanField()),
                ('width', models.IntegerField()),
                ('order', models.FloatField()),
            ],
        ),
        migrations.CreateModel(
            name='To_do',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.CharField(blank=True, max_length=500, null=True)),
                ('completed', models.BooleanField()),
                ('page_element', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='to_do', to='backend.page_element')),
            ],
        ),
        migrations.CreateModel(
            name='Text',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.CharField(blank=True, max_length=5000, null=True)),
                ('page_element', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='text', to='backend.page_element')),
            ],
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('color', models.CharField(max_length=100)),
                ('table_data', models.ManyToManyField(blank=True, related_name='tags', to='backend.Table_data')),
                ('table_head', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tag_heads', to='backend.table_data')),
            ],
        ),
        migrations.CreateModel(
            name='Table_row',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.FloatField()),
                ('table', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rows', to='backend.table')),
            ],
        ),
        migrations.AddField(
            model_name='table_data',
            name='table_row',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='data', to='backend.table_row'),
        ),
        migrations.CreateModel(
            name='PageLink',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('page', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.page')),
                ('page_element', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='page_link', to='backend.page_element')),
            ],
        ),
        migrations.CreateModel(
            name='Kanban_Group',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64)),
                ('color', models.CharField(max_length=100)),
                ('order', models.FloatField()),
                ('kanban', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='kanban_group', to='backend.kanban')),
            ],
        ),
        migrations.CreateModel(
            name='Kanban_Card',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.CharField(blank=True, max_length=100, null=True)),
                ('order_on_group', models.FloatField()),
                ('kanban_group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='kanban_card', to='backend.kanban_group')),
            ],
        ),
        migrations.CreateModel(
            name='Heading_2',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('heading_text', models.CharField(blank=True, max_length=85, null=True)),
                ('page_element', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='heading_2', to='backend.page_element')),
            ],
        ),
        migrations.CreateModel(
            name='Heading_1',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('heading_text', models.CharField(blank=True, max_length=85, null=True)),
                ('page_element', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='heading_1', to='backend.page_element')),
            ],
        ),
    ]
